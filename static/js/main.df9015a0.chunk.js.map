{"version":3,"sources":["Components/Layouts/Header.js","Components/TodoItems.js","Components/Todos.js","Components/AddTodo.js","Components/Layouts/About.js","App.js","serviceWorker.js","index.js"],"names":["headerStyle","background","color","textAlign","padding","Header","react_default","a","createElement","style","react_router_dom","textDecoration","to","TodoItems","getStyle","borderBottom","_this","props","todo","completed","_this$props$todo","this","id","title","type","onChange","markComplete","bind","btnStyle","onClick","deleteTodo","Component","border","borderRadius","float","cursor","Todos","todoList","map","Components_TodoItems","key","AddTodo","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","change","e","setState","defineProperty","target","name","value","submit","addTodo","state","preventDefault","display","onSubmit","placeholder","flex","className","About","Fragment","App","todos","axios","delete","concat","then","res","toConsumableArray","filter","post","data","catch","err","console","log","_this2","get","_this3","Layouts_Header","react_router","exact","path","render","Components_AddTodo","Components_Todos","component","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.df9015a0.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nfunction Header() {\n    return (\n        <header style={headerStyle}>\n            <h1>My Todo App</h1>\n            <Link style={{color:\"#fff\", textDecoration:\"none\"}} to=\"/\">Home</Link> | <Link style={{color:\"#fff\", textDecoration:\"none\"}} to=\"/about\">About</Link>\n        </header>\n    )\n}\n\nconst headerStyle = {\n    background: \"#333\",\n    color: \"#fff\",\n    textAlign: \"center\",\n    padding: \"10px\"\n}\n\nexport default Header\n","import React, { Component } from 'react'\n// import PropTypes from 'prop-types';\n\nclass TodoItems extends Component {\n\n    // Css Inline styles\n    getStyle = () => {\n        return {\n            background: \"#f4f4f4\",\n            padding: \"0.7em\",\n            borderBottom: \"1px #ccc dotted\",\n            textDecoration: this.props.todo.completed ? \"line-through\" : \"none\" \n        }\n    }\n\n    \n\n    render() {\n        const {id, title} = this.props.todo; // Destructuring\n\n        return ( \n            <div style={this.getStyle()}>\n                <input type=\"checkbox\" onChange={this.props.markComplete.bind(this, id)} /> {\" \"}   {/* {\" \"}: To add a space between the checkbox and the items. this.props.markcomplete is using a prop as a method */}\n                {title}\n                <button style={btnStyle} onClick={this.props.deleteTodo.bind(this, id)} >X</button>\n            </div>\n        )\n    }\n}\n\nconst btnStyle = {\n    background: \"#ff4081\",\n    color: \"white\",\n    border: \"none\",\n    borderRadius: \"50%\",\n    padding: \"5px 9px\",\n    float: \"right\",\n    cursor: \"pointer\"\n}\n\n// Define prop types for class\n// TodoItems.propTypes = {\n//     todos: PropTypes.object.isRequired\n// }\n\nexport default TodoItems\n","import React, { Component } from 'react'\nimport TodoItems from './TodoItems';\n// import PropTypes from 'prop-types';\n\nclass Todos extends Component {\n\n\n    render() {\n        const todoList = this.props.todo.map(todo => <TodoItems todo={todo} key={todo.id} markComplete={this.props.markComplete} deleteTodo={this.props.deleteTodo} />)\n        return (\n            <div>\n                {todoList}\n            </div>\n        )\n    }\n}\n\n// Define prop types for class\n// Todos.propTypes = {\n//     todos: PropTypes.array.isRequired\n// }\n\nexport default Todos\n","import React, { Component } from 'react'\n\nclass AddTodo extends Component {\n\n    constructor(props) {\n        super(props)\n    \n        this.state = {\n            title: \"\"\n        }\n    }\n\n    // Change state on user input\n    change = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value\n        })\n    }\n\n    // On click of submit button\n    submit = (e) => {\n        this.props.addTodo(this.state.title);\n        this.setState({\n            title: \"\",\n        })\n        e.preventDefault();\n    }\n    \n\n    render() {\n        return (\n            <form style={{display: \"flex\"}} onSubmit={this.submit}>\n                <input type=\"text\" name=\"title\" placeholder=\"Add Todo Item\"  onChange={this.change} style={{flex: \"10\", padding: \"5px\"}} value={this.state.title} />\n                <input type=\"submit\" value=\"submit\" className=\"btn\" style={{flex: \"1\"}} />\n            </form>\n        )\n    }\n}\n\nexport default AddTodo\n","import React from 'react'\n\nfunction About() {\n    return (\n        <div>\n            <React.Fragment>\n                <h1>About</h1>\n                <p>My First React App</p>\n            </React.Fragment>\n        </div>\n    )\n}\n\nexport default About\n","import React,  { Component } from 'react';\nimport { HashRouter as Router, Route } from 'react-router-dom';\nimport Header from './Components/Layouts/Header';\nimport Todos from './Components/Todos';\nimport AddTodo from './Components/AddTodo';\nimport About from './Components/Layouts/About';\nimport axios from 'axios';\nimport './App.css';\nimport uuid from 'uuid';   // uuid: a package to generate random id's instead of hardcoding them.\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n  \n    this.state = {\n       todos: [\n        //  {\n        //    id: uuid.v4(),  // uuid: a package to generate random id's instead of hardcoding them.\n        //     title: \"Learn React\",\n        //    completed: false\n        //  }\n       ]\n    }\n  }\n\n  // Life cycle method: Like ngOnint in angular\n  componentDidMount() {\n    // Get Request\n    axios.get(\"https://jsonplaceholder.typicode.com/todos?_limit=10\")   // ?_limit=10: to limit the todos coming from the api to 10\n      .then(\n        res => this.setState({todos: res.data})\n      ) \n\n  }\n\n  // toggle if todo is completed\n  markComplete = (id) => {\n    this.setState({\n      todos: this.state.todos.map(todo => {\n        if(todo.id === id) {\n          todo.completed = !todo.completed\n        }\n        return todo;\n      })\n    })\n  }\n\n  // Delete Todo Items\n  deleteTodo = (id) => {\n    axios.delete(`https://jsonplaceholder.typicode.com/todos/${id}`)\n      .then(\n        res => this.setState({\n          todos: [...this.state.todos.filter(todo => todo.id !== id)]\n        })\n      )\n  }\n\n  // Add Todo Item\n  addTodo = (title) => {\n    axios.post(\"https://jsonplaceholder.typicode.com/todos\", {title, completed:false}) // title: title is how its supposed tobe but in ES6 if the key and value are the same yoou can just set it to: title\n      .then(\n        res => this.setState({\n          todos: [...this.state.todos, res.data]\n        })\n      ) \n      .catch(\n        err => console.log(err)\n      )\n  }\n    \n\n  render() {\n      return (\n        <Router>\n          <div className=\"App\">\n            <div className=\"container\">\n              <Header />\n              <Route exact path=\"/\" render={props => (\n                <React.Fragment>\n                  <AddTodo addTodo={this.addTodo} />\n                  <Todos todo={this.state.todos} markComplete={this.markComplete} deleteTodo={this.deleteTodo} />\n                </React.Fragment>\n              )} />\n              <Route path=\"/about\" component={About} />              \n            </div>\n          </div>\n        </Router>\n      )\n  }\n}\n\n\n\n\n\n\n\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <Todos />\n//     </div>\n//   );\n// }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}